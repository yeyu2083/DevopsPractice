name: Pipeline Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  init:
    runs-on: self-hosted
    steps:
      - name: Check Environment
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Initialization Phase ==="
          Write-Host "Current Directory:"
          Get-Location
          Write-Host "System Info:"
          systeminfo | Select-String "OS"

  test:
    runs-on: self-hosted
    needs: init
    steps:
      - name: Run Tests
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Testing Phase ==="
          Write-Host "Checking if Node.js is available:"
          try { node --version } catch { Write-Host "Node.js not installed" }
          try { npm --version } catch { Write-Host "npm not installed" }
          Write-Host "Current directory contents:"
          Get-ChildItem

  build:
    runs-on: self-hosted
    needs: [init, test]
    steps:
      - uses: actions/checkout@v4
      - name: Build Docker Image
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Build Phase ==="
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          Write-Host "Would build Docker image: my-image-name:$timestamp"
          # docker build . --file Dockerfile --tag my-image-name:$timestamp
        
  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Deploy Application
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Deploy Phase ==="
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          Write-Host "Simulating deployment of my-image-name:$timestamp"
          # Aquí irían los comandos reales de deployment

  notify:
    runs-on: self-hosted
    needs: deploy
    if: always()
    steps:
      - name: Notification Status
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Notification Phase ==="
          Write-Host "✅ Pipeline workflow completed!"
          Write-Host "All phases executed successfully"
      - name: Show initial directory
        run: |
          Write-Host "=== TEST EXECUTION STARTED ==="
          Write-Host "Current directory before checkout:"
          Get-Location
          Write-Host "Directory contents before checkout:"
          Get-ChildItem
          Write-Host "=== INITIAL CHECK COMPLETE ==="
        shell: powershell
        
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Show directory after checkout
        run: |
          Write-Host "Current directory after checkout:"
          Get-Location
          Write-Host "Directory contents after checkout:"
          Get-ChildItem
        shell: powershell
        
      - name: Check runner environment with detailed logs
        run: |
          $ErrorActionPreference = 'Continue'
          Start-Transcript -Path ".\logs\environment.log"
          
          Write-Host "=== Environment Information ===" | Tee-Object -FilePath ".\logs\summary.log"
          Write-Host "PowerShell Version:" | Tee-Object -Append -FilePath ".\logs\summary.log"
          $PSVersionTable | Tee-Object -Append -FilePath ".\logs\summary.log"
          
          Write-Host "`n=== Current Directory ===" | Tee-Object -Append -FilePath ".\logs\summary.log"
          Write-Host "Current Path:" | Tee-Object -Append -FilePath ".\logs\summary.log"
          Get-Location | Tee-Object -Append -FilePath ".\logs\summary.log"
          
          Write-Host "`n=== Directory Contents ===" | Tee-Object -Append -FilePath ".\logs\summary.log"
          Get-ChildItem -Recurse | Tee-Object -Append -FilePath ".\logs\summary.log"
          
          Write-Host "`n=== System Information ===" | Tee-Object -Append -FilePath ".\logs\summary.log"
          Write-Host "Runner User:" | Tee-Object -Append -FilePath ".\logs\summary.log"
          whoami | Tee-Object -Append -FilePath ".\logs\summary.log"
          
          Write-Host "`n=== Environment Variables ===" | Tee-Object -Append -FilePath ".\logs\summary.log"
          Get-ChildItem env: | Format-Table -AutoSize | Tee-Object -Append -FilePath ".\logs\summary.log"
          
          Write-Host "`n=== Error Logs ===" | Tee-Object -Append -FilePath ".\logs\summary.log"
          Get-Error | Tee-Object -Append -FilePath ".\logs\summary.log"
          
          Stop-Transcript
        shell: powershell
        continue-on-error: true
        
      - name: Verify Git with logs
        run: |
          Write-Host "=== Git Information ===" | Tee-Object -FilePath ".\logs\git.log"
          git --version | Tee-Object -Append -FilePath ".\logs\git.log"
          git status | Tee-Object -Append -FilePath ".\logs\git.log"
          
          Write-Host "`n=== Git Config ===" | Tee-Object -Append -FilePath ".\logs\git.log"
          git config --list | Tee-Object -Append -FilePath ".\logs\git.log"
        shell: powershell
        continue-on-error: true
        
      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: runner-logs
          path: logs/