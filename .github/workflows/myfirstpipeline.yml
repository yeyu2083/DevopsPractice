name: Pipeline Workflow

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  init:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '21'
      - name: Check Environment
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Initialization Phase ==="
          Write-Host "Current Directory:"
          Get-Location
          Write-Host "System Info:"
          systeminfo | Select-String "OS"
          Write-Host "Node.js Version:"
          node --version
          Write-Host "NPM Version:"
          npm --version

  test:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
      - name: Dependencies Setup
        uses: actions/setup-node@v4
        with:
          node-version: '21'
      - name: Run Tests
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Testing Phase ==="
          Write-Host "Checking if Node.js is available:"
          try { node --version } catch { Write-Host "Node.js not installed" }
          try { npm --version } catch { Write-Host "npm not installed" }
          Write-Host "Current directory contents:"
          Get-ChildItem

  build:
    runs-on: self-hosted
    needs: [init, test]
    steps:
      - uses: actions/checkout@v4
      - name: Debug credentials
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Debug Docker Credentials ==="
          Write-Host "Username: ${{ vars.DOCKERHUB_USERNAME }}"
          Write-Host "Token exists: ${{ secrets.DOCKERHUB_TOKEN != '' }}"
          Write-Host "Token length: $($env:DOCKERHUB_TOKEN.Length)"
        env:
          DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ vars.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          context: .
          file: Dockerfile
          tags: yesicawind/devopspractice:latest
        
  deploy:
    runs-on: self-hosted
    needs: build
    steps:
      - name: Deploy Application
        shell: pwsh -ExecutionPolicy Bypass -Command "{0}"
        run: |
          Write-Host "=== Deploy Phase ==="
          $timestamp = Get-Date -Format "yyyyMMddHHmmss"
          Write-Host "Simulating deployment of my-image-name:$timestamp"
          # Aqu√≠ ir√≠an los comandos reales de deployment

  notify:
    runs-on: self-hosted
    needs: deploy
    if: always()
    steps:
      - name: send telegram message on push
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: |
            üöÄ **Pipeline Completed Successfully!**
            
            üë§ **Actor:** ${{ github.actor }}
            üìù **Commit:** ${{ github.event.commits[0].message }}
            üè∑Ô∏è **Branch:** ${{ github.ref_name }}
            üì¶ **Repository:** ${{ github.repository }}
            üê≥ **Docker Image:** yesicawind/devopspractice:latest
            
            ‚úÖ **Phases completed:**
            ‚Ä¢ Init & Test (parallel)
            ‚Ä¢ Build & Docker Push
            ‚Ä¢ Deploy
            ‚Ä¢ Notification
            
            üîó **See changes:** https://github.com/${{ github.repository }}/commit/${{github.sha}}